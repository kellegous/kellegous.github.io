<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes</title>
    <link>http://notes.kellegous.com/</link>
    <description>Recent content on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Mar 2016 16:55:29 -0400</lastBuildDate>
    <atom:link href="http://notes.kellegous.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kubernetes on Vagrant: Making shit work</title>
      <link>http://notes.kellegous.com/note/2016/03/kubernetes-on-vagrant-making-shit-work</link>
      <pubDate>Sun, 20 Mar 2016 16:55:29 -0400</pubDate>
      
      <guid>http://notes.kellegous.com/note/2016/03/kubernetes-on-vagrant-making-shit-work</guid>
      <description>

&lt;p&gt;For us xooglers, &lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; is the closest thing in the outside world to &lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43438.pdf&#34;&gt;Borg&lt;/a&gt;. I don&amp;rsquo;t have any immediate need to use it, but twice now I have decided it would be a fun thing to tinker with. Both times, I&amp;rsquo;ve run into issues with the getting started guides. This post is to note the work-arounds for the problem I encountered.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m pretty sure that if I were willing to pay Google some money to learn about Kubernetes on &lt;a href=&#34;http://kubernetes.io/docs/hellonode/&#34;&gt;Google Container Engine&lt;/a&gt;, it would all work just flawlessly. Unfortunately, I&amp;rsquo;m cheap and I want to learn about Kubernetes using &lt;a href=&#34;http://kubernetes.io/docs/getting-started-guides/vagrant/&#34;&gt;Vagrant on my laptop&lt;/a&gt;. Unsurprisingly, this getting started guide is woefully incomplete. It has you create a replicated nginx setup where you cannot even reach any of the 3 replicas and then it closes with what I take to be a sarcastic, &amp;ldquo;Congratulations!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So this post shows you how you can actually see the nginx welcome pages and thus prove to yourself that you managed to run nginx beyond just trusting what the Kubernetes tools tell you. Just to be clear, though, this post doesn&amp;rsquo;t try to replace &lt;a href=&#34;http://kubernetes.io/docs/getting-started-guides/vagrant/&#34;&gt;&amp;ldquo;Running Kubernetes Locally with Vagrant&amp;rdquo;&lt;/a&gt;. I&amp;rsquo;m just merely filling in one big information hole in that guide, which is how to connect to the nginx servers that you just heroically started in container-space. To make this more helpful to future me, though, I&amp;rsquo;m going to include all the steps. If you are not me, you should start with the original guide and come back to these steps. So here goes:&lt;/p&gt;

&lt;h2 id=&#34;running-nginx-in-kubernetes-locally-with-vagrant:198398dc3089a3be7cf67c252bb2c6a1&#34;&gt;Running nginx in Kubernetes Locally with Vagrant&lt;/h2&gt;

&lt;h3 id=&#34;1-create-a-kubernetes-cluster-with-a-master-and-a-single-node:198398dc3089a3be7cf67c252bb2c6a1&#34;&gt;1. Create a Kubernetes cluster with a master and a single node.&lt;/h3&gt;

&lt;pre class=&#34;console&#34;&gt;
$ export KUBERNETES_PROVIDER=vagrant
$ curl -sS https://get.k8s.io | bash
&lt;/pre&gt;

&lt;h3 id=&#34;2-start-an-nginx-deployment-with-3-replicas:198398dc3089a3be7cf67c252bb2c6a1&#34;&gt;2. Start an nginx deployment with 3 replicas.&lt;/h3&gt;

&lt;pre class=&#34;console&#34;&gt;
$ ./cluster/kubectl.sh run my-nginx --image=nginx --replicas=3 --port=80
&lt;/pre&gt;

&lt;p&gt;Unfortunately, this is where the original guide stops. You can see that nginx is running using kubectl, but you have no way to use your browser to load the default welcome page. I thought at first that the authors were just lazy and I tried to steal commands from the non-vagrant guides but I was unable to make it work. Here&amp;rsquo;s the command that you would expect to use next:&lt;/p&gt;

&lt;pre class=&#34;console&#34;&gt;
$ ./cluster/kubectl.sh expose deployment my-nginx --port=80 --type=LoadBalancer
&lt;/pre&gt;

&lt;p&gt;This command claims to succeed, but it&amp;rsquo;s actually doing nothing at all. I didn&amp;rsquo;t know this until I found a &lt;a href=&#34;https://github.com/coreos/coreos-kubernetes/issues/60&#34;&gt;set&lt;/a&gt; &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/18884&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/9776&#34;&gt;issues&lt;/a&gt; that revealed that asking for a LoadBalancer in a Vagrant environment was essentially a no-op. It claims to succeed, but you just don&amp;rsquo;t get a load balancer.&lt;/p&gt;

&lt;p&gt;The solution is to replace &lt;code&gt;--type=LoadBalancer&lt;/code&gt; with &lt;code&gt;--type=NodePort&lt;/code&gt;. NodePort is not as cool, it just means that instead of getting a real external IP address, a port will be allocated on each of your nodes (we only have a single node in this example). While this is convoluted, it will allow us to reach nginx running in our Kubernetes cluster.&lt;/p&gt;

&lt;h3 id=&#34;3-exposing-nginx-as-a-service:198398dc3089a3be7cf67c252bb2c6a1&#34;&gt;3. Exposing nginx as a service&lt;/h3&gt;

&lt;pre class=&#34;console&#34;&gt;
$ ./cluster/kubectl.sh expose deployment my-nginx --type=NodePort
&lt;/pre&gt;

&lt;p&gt;Now, we need to know a couple of other bits of information (1) the IP address of our node and (2) the port that our service got mapped to.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s find the IP Address of our node:&lt;/p&gt;

&lt;pre class=&#34;console&#34;&gt;
$ ./cluster/kubectl.sh describe nodes | grep Address
Addresses:    &lt;strong&gt;10.245.1.3&lt;/strong&gt;,10.245.1.3
&lt;/pre&gt;

&lt;p&gt;The IP Address for our node is &lt;strong&gt;10.245.1.3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And let&amp;rsquo;s find the &amp;ldquo;NodePort&amp;rdquo;&lt;/p&gt;

&lt;pre class=&#34;console&#34;&gt;
$ ./cluster/kubectl.sh describe services | grep ^NodePort
NodePort:    &amp;lt;unset&amp;gt;    &lt;strong&gt;30505&lt;/strong&gt;/TCP
&lt;/pre&gt;

&lt;p&gt;And the NodePort is &lt;strong&gt;30505&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So we can reach nginx in the browser by visiting the address: &lt;strong&gt;http:&lt;i&gt;&lt;/i&gt;//10.245.1.3:30505/&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://notes.kellegous.com/img/kubernetes-vagrant/nginx.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;You can see why that is a lot less satisfying than running this in the cloud and getting a real IP Address, but for those who are excessively cheap like I am, &lt;code&gt;http://10.245.1.3:30505&lt;/code&gt; will do just fine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Draw Hex Grids</title>
      <link>http://notes.kellegous.com/note/2016/03/how-to-draw-hex-grids</link>
      <pubDate>Sun, 06 Mar 2016 20:29:25 -0500</pubDate>
      
      <guid>http://notes.kellegous.com/note/2016/03/how-to-draw-hex-grids</guid>
      <description>

&lt;p&gt;About every six months, I face the exact same task. I need to draw some kind of hex-based grid. It&amp;rsquo;s not that surprising that it keeps coming up, hex grids are just aesthetically amazing and also relatively simple. But everytime this comes up, I find myself scribbling formulas in a notebook to remember what it was I did last time to make the associated code somewhat sane. So these are those recurring notes.&lt;/p&gt;

&lt;h2 id=&#34;drawing-a-hexagon:e89913c8ad2f819575e453cdc9a0f6c3&#34;&gt;Drawing a Hexagon&lt;/h2&gt;

&lt;p&gt;First of all, let&amp;rsquo;s talk about the basics. How do you draw a single hexagon?&lt;/p&gt;

&lt;p&gt;&lt;object data=&#34;/note/hex-grid/a.svg&#34; type=&#34;image/svg+xml&#34; class=&#34;svg&#34;&gt;
&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;In python, this might look like this:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;&lt;code&gt;&lt;!--
--&gt;def draw_hexagon(cx, cy, r):
    a = r*math.cos(math.pi/3)
    b = r*math.sin(math.pi/3)
    beginpath(cx + r, cy)
    lineto(cx + a, cy + b)
    lineto(cx - a, cy + b)
    lineto(cx - r, cy)
    lineto(cx - a, cy - b)
    lineto(cx + a, cy - b)
    closepath()
    endpath()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, this is a hexagon specific version of the following code which draws a polygon with n vertices on the circumference of a circle.&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;&lt;code&gt;&lt;!--
--&gt;def draw_polygon(cx, cy, r, n):
    beginpath(cx + r, cy)
    for i in range(1, n):
        lineto(cx + r * math.cos(i * 2 * math.pi / n),
               cy + r * math.sin(i * 2 * math.pi / n))
    closepath()
    endpath()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But the interesting bit is drawing a grid of hexagons. You know, like a honey comb. That&amp;rsquo;s the thing I always forget.&lt;/p&gt;

&lt;h2 id=&#34;drawing-a-grid-of-hexagons:e89913c8ad2f819575e453cdc9a0f6c3&#34;&gt;Drawing a Grid of Hexagons&lt;/h2&gt;

&lt;p&gt;If you want to know everything about hexagonal grids, read &lt;a href=&#34;http://www.redblobgames.com/grids/hexagons/&#34;&gt;Amit Patel&amp;rsquo;s amazing article&lt;/a&gt;. By the way, I once chatted with Amit over email at Google because he watched everyone&amp;rsquo;s snippets for the terms &amp;ldquo;space elevator&amp;rdquo;. Anyway, I&amp;rsquo;m not trying to be exhaustive as Amit here. I&amp;rsquo;m just trying to document the method I often use to draw a hexagonal grid.&lt;/p&gt;

&lt;p&gt;The most imporant part is finding a useful unit of repetition. You know, something you can draw repeatedly using a plain ole&amp;rsquo; rectangular grid. Well, here&amp;rsquo;s something:&lt;/p&gt;

&lt;p&gt;&lt;object data=&#34;/note/hex-grid/repeat.svg&#34; type=&#34;image/svg+xml&#34; class=&#34;svg&#34;&gt;
&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;As you can tell, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are the coordinates upon which the grid is built. If we simply divide the space up so that we can repeat these two offset hexagons, things should work out. It kind of looks like this.&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;&lt;code&gt;&lt;!--
--&gt;def draw_hexagon(cx, cy, r):
    a = r*math.cos(math.pi/3)
    b = r*math.sin(math.pi/3)
    beginpath(cx + r, cy)
    lineto(cx + a, cy + b)
    lineto(cx - a, cy + b)
    lineto(cx - r, cy)
    lineto(cx - a, cy - b)
    lineto(cx + a, cy - b)
    closepath()
    endpath()
    
def draw_grid(w, h, n=20):
    # the size of the repeatable grid
    dx = w / n    
    # find the value for a (dx is 6 a&#39;s)
    a = dx / 6.0
    r = 2 * a
    # find the value for b
    b = r * math.sin(math.pi/3.0)
    # number of repeatable grids vertically
    dy = b*2
    
    ny = int(math.ceil(h / dy)) + 1

    for j in range(ny):
        for i in range(n+1):
            draw_hexagon(i*dx, j*dy, r)
            draw_hexagon(i*dx + 3*a, j*dy + b, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s the deal with SafeVarargs?</title>
      <link>http://notes.kellegous.com/note/2016/02/whats-the-deal-with-safevarargs</link>
      <pubDate>Sat, 13 Feb 2016 09:19:58 -0500</pubDate>
      
      <guid>http://notes.kellegous.com/note/2016/02/whats-the-deal-with-safevarargs</guid>
      <description>

&lt;p&gt;After a long absence, I&amp;rsquo;ve recently found myself back in the world of Java.
Prior to the break, though, I worked in some kind of JVM language almost every
day. When you are fully immersed, you begin to not see Java&amp;rsquo;s quirks. But if
you take a break and come back, they are all (once again) front and center.&lt;/p&gt;

&lt;p&gt;My most recent rediscovered quirk is the curious case of why a combination of
generics and variadic methods requires the use of &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/lang/SafeVarargs.html&#34;&gt;@SafeVarargs&lt;/a&gt;. I suspect the
most confusing thing about this particular quirk is the wording of the common
warning that is emitted. My suspicions are backed up by the number of
stack overflow questions that reference warning directly. So let&amp;rsquo;s take a look
at some code that causes the warning.&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;&lt;code&gt;&lt;!--
--&gt;static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; toList(T... args) {
  List&amp;lt;T&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
  for (T arg : args) {
    list.add(arg);
  }
  return list;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now let&amp;rsquo;s look at the warning that is emitted by the Java compiler:&lt;/p&gt;

&lt;pre class=&#34;console&#34;&gt;
warning: [unchecked] Possible heap pollution from parameterized vararg type T
&lt;/pre&gt;

&lt;p&gt;I think the most mysterious part of this warning is that it mentions the
possibility of something that sounds truly disastrous, &amp;ldquo;heap pollution&amp;rdquo;. To
which most people, I assume, respond with: ¯\_(ツ)_/¯&lt;/p&gt;

&lt;h2 id=&#34;what-is-heap-pollution:686eb5ab52f3dcd856912dc8fdc5bc64&#34;&gt;What is heap pollution?&lt;/h2&gt;

&lt;p&gt;Heap pollution really just means the type of the thing you have does not match
the type indicated by the type system. You really shouldn&amp;rsquo;t be able to cause
heap pollution in Java without doing something that emits a warning. Like here
is a super simple form of heap pollution.&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;&lt;code&gt;&lt;!--
--&gt;List&amp;lt;String&amp;gt; a = new ArrayList&amp;lt;&amp;gt;();
((List)a).add(4);
System.out.println(a.get(0)); // ClassCastException!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As expected, though, line #2 causes a compiler warning. The big issue with a
polluted heap is you will get a type error at the worst time, runtime.&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-varargs-to-pollute-the-heap:686eb5ab52f3dcd856912dc8fdc5bc64&#34;&gt;How to use varargs to pollute the heap&lt;/h2&gt;

&lt;p&gt;The warning we saw above on variadic, generic methods suggests there is a way to
write code that pollutes the heap without any other compiler warning. Indeed
there is:&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;&lt;code&gt;&lt;!--
--&gt;static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; makePollute(T... args) {
    Object[] asArray = args;
    asArray[0] = 42;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we do some unmistakably bad things here, but the compiler doesn&amp;rsquo;t
offer any warnings. At runtime, though, this is likely to throw either an
&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/lang/ArrayStoreException.html&#34;&gt;ArrayStoreException&lt;/a&gt; or a &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/lang/ClassCastException.html&#34;&gt;ClassCastException&lt;/a&gt; depending on the types involved.
There are also cases where this code doesn&amp;rsquo;t show an exception at all.&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;&lt;code&gt;&lt;!--
--&gt;makePollute(1, 2, 3); // no exception
makePollute(&#34;foo&#34;, &#34;bar&#34;); // ArrayStoreException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To understand why this happens, you have to look at what the java byte code looks
like when you take into account &lt;a href=&#34;http://javapapers.com/core-java/type-erasure/&#34;&gt;type erasure&lt;/a&gt; and the fact that variadic
methods are simply methods that take arrays as arguments.&lt;/p&gt;

&lt;pre class=&#34;prettyprint linenums&#34;&gt;&lt;code&gt;&lt;!--
--&gt;static void makePollute(Object[] args) {
  Object[] asArray = args;
  asArray[0] = 42;
}

public static void main(String[] args) {
  Integer[] args1 = new Integer[3];
  args1[0] = Integer.valueOf(1);
  args1[1] = Integer.valueOf(2);
  args1[2] = Integer.valueOf(3);
  makePollute(args1);

  String[] args2 = new String[2];
  args2[0] = &#34;foo&#34;;
  args2[1] = &#34;bar&#34;;
  makePollute(args2); // asArray[0] = 42 won&#39;t work!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s now a little clearer why you end up with an &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/lang/ArrayStoreException.html&#34;&gt;ArrayStoreException&lt;/a&gt;.
I remember
chatting with some of the folks who worked on Java and the JVM and they always
bemoaned the fact that seemingly independent language features tended to interact
with each other in so many unpleasant ways. I imagine this is exactly the kind
of thing they had in mind.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://notes.kellegous.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://notes.kellegous.com/about/</guid>
      <description>

&lt;h2 id=&#34;about-this-site:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;About This Site&lt;/h2&gt;

&lt;p&gt;My primary site is &lt;a href=&#34;http://www.kellegous.com/&#34;&gt;kellegous.com&lt;/a&gt; and that&amp;rsquo;s where I try to publish content that is a bit more polished. Well, I aspire to making it polished. This site is definitely not intended to be polished. This site is my own personal notes. You are certainly welcome to follow along, you can even do so in early 2000&amp;rsquo;s &lt;a href=&#34;http://notes.kellegous.com/index.xml&#34;&gt;RSS style&lt;/a&gt; if you wish. But do keep in mind that the primary audience for this site is me.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>